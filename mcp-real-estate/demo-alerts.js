// demo-alerts.js - Demostraci√≥n completa del sistema de alertas

const PropertyAlertsSystem = require('./alerts-system');

async function demoCompleto() {
  console.log('üö® SISTEMA DE ALERTAS AUTOM√ÅTICAS - DEMO COMPLETO\n');
  console.log('=' .repeat(60));

  const alertSystem = new PropertyAlertsSystem();
  
  // 1. Crear diferentes tipos de alertas
  console.log('\n1Ô∏è‚É£ CREANDO ALERTAS DE EJEMPLO...\n');
  
  const alerta1 = await alertSystem.createAlert({
    name: 'Pisos econ√≥micos Jerez',
    location: 'jerez',
    maxPrice: 85000,
    rooms: 2,
    email: 'inversor@ejemplo.com',
    frequency: 'daily',
    console: true
  });
  
  const alerta2 = await alertSystem.createAlert({
    name: 'Oportunidades de inversi√≥n',
    location: 'jerez',
    minPrice: 50000,
    maxPrice: 120000,
    rooms: 2,
    email: 'oportunidades@ejemplo.com',
    webhook: 'https://hooks.ejemplo.com/webhook',
    frequency: 'hourly',
    console: true
  });
  
  const alerta3 = await alertSystem.createAlert({
    name: 'Propiedades premium',
    location: 'jerez',
    minPrice: 100000,
    rooms: 2,
    maxDaysOld: 3,
    email: 'premium@ejemplo.com',
    frequency: 'hourly',
    console: true
  });
  
  console.log(`‚úÖ ${alerta1.name} - ID: ${alerta1.id}`);
  console.log(`‚úÖ ${alerta2.name} - ID: ${alerta2.id}`);  
  console.log(`‚úÖ ${alerta3.name} - ID: ${alerta3.id}`);
  
  // 2. Listar alertas
  console.log('\n' + '='.repeat(60));
  console.log('\n2Ô∏è‚É£ LISTADO DE ALERTAS CONFIGURADAS...\n');
  
  const alertas = await alertSystem.getAlerts();
  alertas.forEach((alert, index) => {
    console.log(`üìã ${index + 1}. ${alert.name}`);
    console.log(`   üÜî ID: ${alert.id}`);
    console.log(`   üè† Ubicaci√≥n: ${alert.criteria.location}`);
    console.log(`   üí∞ Precio: ${alert.criteria.minPrice || 0}‚Ç¨ - ${alert.criteria.maxPrice || '‚àû'}‚Ç¨`);
    console.log(`   üõèÔ∏è  Habitaciones: ${alert.criteria.rooms || 'Cualquiera'}`);
    console.log(`   üìß Email: ${alert.notifications.email || 'No configurado'}`);
    console.log(`   üìÖ Frecuencia: ${alert.schedule.frequency}`);
    console.log(`   ${alert.active ? '‚úÖ Activa' : '‚ùå Inactiva'}`);
    console.log('');
  });
  
  // 3. Verificar alertas manualmente
  console.log('='.repeat(60));
  console.log('\n3Ô∏è‚É£ VERIFICACI√ìN MANUAL DE ALERTAS...\n');
  
  for (const alert of alertas) {
    console.log(`üîç Verificando: ${alert.name}`);
    const newProperties = await alertSystem.checkAlert(alert);
    
    if (newProperties.length > 0) {
      console.log(`   üö® ${newProperties.length} nuevas propiedades encontradas!`);
    } else {
      console.log(`   ‚ÑπÔ∏è  Sin nuevas propiedades`);
    }
  }
  
  // 4. Mostrar estad√≠sticas
  console.log('\n' + '='.repeat(60));
  console.log('\n4Ô∏è‚É£ ESTAD√çSTICAS DEL SISTEMA...\n');
  
  const stats = await alertSystem.getStats();
  console.log(`üìä Total de alertas: ${stats.totalAlerts}`);
  console.log(`‚úÖ Alertas activas: ${stats.activeAlerts}`);
  console.log(`‚ùå Alertas inactivas: ${stats.inactiveAlerts}`);
  console.log(`üìß Notificaciones enviadas: ${stats.totalNotifications}`);
  console.log(`üîÑ Monitoreo autom√°tico: ${stats.isMonitoring ? 'Activo' : 'Inactivo'}`);
  
  if (stats.lastNotification) {
    console.log(`‚è∞ √öltima notificaci√≥n: ${new Date(stats.lastNotification).toLocaleString()}`);
  }
  
  // 5. Demostrar monitoreo autom√°tico
  console.log('\n' + '='.repeat(60));
  console.log('\n5Ô∏è‚É£ INICIANDO MONITOREO AUTOM√ÅTICO...\n');
  
  console.log('üöÄ El monitoreo autom√°tico verificar√° las alertas cada 30 segundos');
  console.log('üîî Las notificaciones se enviar√°n seg√∫n configuraci√≥n');
  console.log('‚èπÔ∏è  Presiona Ctrl+C para detener');
  
  // Iniciar monitoreo con intervalo corto para demo
  alertSystem.startMonitoring(0.5); // 30 segundos para demo
  
  // Mantener el proceso corriendo
  process.on('SIGINT', () => {
    console.log('\n\n‚èπÔ∏è Deteniendo sistema de alertas...');
    alertSystem.stopMonitoring();
    console.log('‚úÖ Sistema detenido correctamente');
    process.exit(0);
  });
  
  console.log('\nüí° COMANDOS DISPONIBLES EN PRODUCCI√ìN:');
  console.log('   ‚Ä¢ alertSystem.createAlert(config)');
  console.log('   ‚Ä¢ alertSystem.getAlerts()');
  console.log('   ‚Ä¢ alertSystem.checkAllAlerts()');
  console.log('   ‚Ä¢ alertSystem.startMonitoring()');
  console.log('   ‚Ä¢ alertSystem.stopMonitoring()');
}

// Ejecutar demo
demoCompleto().catch(console.error);
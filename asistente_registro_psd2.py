#!/usr/bin/env python3
"""
Asistente de Registro PSD2
=========================

Asistente interactivo para el proceso de registro como TPP
en la plataforma Redsys para acceso a APIs PSD2 de Bankinter.
"""

import webbrowser
import datetime
import os

class RegistroPSD2Assistant:
    """Asistente para el proceso de registro PSD2"""
    
    def __init__(self):
        self.user_data = {}
        
    def welcome(self):
        """Pantalla de bienvenida"""
        print("="*60)
        print("üè¶ ASISTENTE REGISTRO API PSD2 BANKINTER")
        print("="*60)
        print()
        print("Este asistente te guiar√° paso a paso para:")
        print("‚úÖ Registrarte como Third Party Provider (TPP)")
        print("‚úÖ Obtener acceso al sandbox de Redsys")
        print("‚úÖ Configurar tu aplicaci√≥n para Bankinter")
        print("‚úÖ Generar emails y documentos necesarios")
        print()
        print("Tiempo estimado total: 5-7 d√≠as")
        print("Tiempo estimado hoy: 20 minutos")
        print()
        
    def collect_user_info(self):
        """Recopilar informaci√≥n del usuario"""
        print("üìù PASO 1: INFORMACI√ìN B√ÅSICA")
        print("-" * 40)
        
        self.user_data['nombre'] = input("Nombre completo: ").strip()
        self.user_data['empresa'] = input("Nombre de empresa (o tu nombre si es personal): ").strip()
        self.user_data['email'] = input("Email de contacto: ").strip()
        self.user_data['telefono'] = input("Tel√©fono: ").strip()
        self.user_data['direccion'] = input("Direcci√≥n completa: ").strip()
        
        print("\n‚úÖ Informaci√≥n recopilada correctamente")
        
    def generate_registration_email(self):
        """Generar email de solicitud"""
        email_content = f"""
Asunto: TPP support tool registration

Estimados,

Solicito acceso al sandbox de PSD2 para desarrollo de aplicaci√≥n de gesti√≥n inmobiliaria.

DATOS DE LA EMPRESA:
- Nombre: {self.user_data['empresa']}
- Email: {self.user_data['email']}  
- Tel√©fono: {self.user_data['telefono']}
- Direcci√≥n: {self.user_data['direccion']}

DATOS T√âCNICOS:
- Tipo de servicio: Account Information Service Provider (AISP)
- Finalidad: Gesti√≥n autom√°tica de transacciones bancarias para gesti√≥n inmobiliaria
- Banco objetivo: Bankinter
- Entorno: Sandbox inicialmente, producci√≥n posteriormente

DATOS DEL DESARROLLADOR:
- Nombre: {self.user_data['nombre']}
- Experiencia: Desarrollo de APIs bancarias y aplicaciones de gesti√≥n
- Framework: Python + FastAPI
- Casos de uso: Descarga autom√°tica de movimientos bancarios, conciliaci√≥n de pagos de alquiler

JUSTIFICACI√ìN DEL PROYECTO:
Desarrollo de una aplicaci√≥n de gesti√≥n inmobiliaria que requiere acceso autom√°tico 
a transacciones bancarias para:
- Conciliaci√≥n autom√°tica de pagos de alquiler
- Gesti√≥n de gastos e ingresos de propiedades
- Generaci√≥n de informes financieros

Cumplo con todos los requisitos t√©cnicos y de seguridad establecidos por PSD2.

Quedo a la espera de su respuesta para proceder con la configuraci√≥n.

Saludos cordiales,
{self.user_data['nombre']}
{self.user_data['email']}
{self.user_data['telefono']}
"""
        
        # Guardar email en archivo
        filename = f"email_solicitud_psd2_{datetime.datetime.now().strftime('%Y%m%d_%H%M%S')}.txt"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(email_content)
        
        print(f"\nüìß EMAIL GENERADO: {filename}")
        print("-" * 50)
        print("Para: psd2.sandbox.soporte@redsys.es")
        print("Asunto: TPP support tool registration")
        print(f"Contenido guardado en: {filename}")
        print()
        print("‚ö†Ô∏è  IMPORTANTE:")
        print("- Copia el contenido del archivo")
        print("- Env√≠a desde tu email personal/empresarial")
        print("- El asunto DEBE ser exactamente: TPP support tool registration")
        
        return filename
    
    def open_registration_links(self):
        """Abrir enlaces relevantes"""
        print("\nüåê ABRIENDO ENLACES IMPORTANTES...")
        
        links = [
            ("Portal Principal Redsys", "https://market.apis-i.redsys.es/psd2/xs2a"),
            ("Gu√≠a Web Redsys", "https://market.apis-i.redsys.es/psd2/xs2a/guia"),
            ("APIs Bankinter", "https://market.apis-i.redsys.es/psd2/xs2a/nodos/bankinter")
        ]
        
        for name, url in links:
            try:
                print(f"Abriendo: {name}")
                webbrowser.open(url)
            except:
                print(f"‚ùå No se pudo abrir: {url}")
                print(f"   Copia y pega manualmente: {url}")
        
        print("\n‚úÖ Enlaces abiertos en tu navegador")
        
    def create_config_template(self):
        """Crear template de configuraci√≥n"""
        config_content = f"""
# CONFIGURACI√ìN API PSD2 BANKINTER
# ================================

# Datos de registro
EMPRESA = "{self.user_data['empresa']}"
EMAIL = "{self.user_data['email']}"
TELEFONO = "{self.user_data['telefono']}"

# Credenciales (completar cuando las recibas)
CLIENT_ID = "TU_CLIENT_ID_AQUI"
CLIENT_SECRET = "TU_CLIENT_SECRET_AQUI"

# URLs del entorno sandbox
SANDBOX_API_URL = "https://apis-i.redsys.es:20443/psd2/xs2a/api-entrada-xs2a/services/bankinter/v1.1"
SANDBOX_OAUTH_URL = "https://apis-i.redsys.es:20443/psd2/xs2a/api-oauth-xs2a/services/rest/bankinter"

# URLs de producci√≥n (para el futuro)
PROD_API_URL = "https://apis-i.redsys.es:20443/psd2/xs2a/api-entrada-xs2a/services/bankinter/v1.1"
PROD_OAUTH_URL = "https://apis-i.redsys.es:20443/psd2/xs2a/api-oauth-xs2a/services/rest/bankinter"

# Configuraci√≥n de la aplicaci√≥n
APP_NAME = "Inmuebles Management App"
APP_DESCRIPTION = "Aplicaci√≥n de gesti√≥n inmobiliaria con integraci√≥n bancaria"
CALLBACK_URL = "http://localhost:8000/callback"

# Fecha de solicitud
FECHA_SOLICITUD = "{datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
"""
        
        filename = "config_psd2.py"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(config_content)
        
        print(f"\n‚öôÔ∏è CONFIGURACI√ìN CREADA: {filename}")
        print("Completar√°s las credenciales cuando recibas respuesta de Redsys")
        
        return filename
    
    def show_next_steps(self):
        """Mostrar pr√≥ximos pasos"""
        print("\n" + "="*60)
        print("üéØ PR√ìXIMOS PASOS")
        print("="*60)
        
        steps = [
            ("HOY", [
                "‚úÖ 1. Crear cuenta en https://market.apis-i.redsys.es",
                "‚úÖ 2. Enviar el email generado a: psd2.sandbox.soporte@redsys.es", 
                "‚úÖ 3. Guardar este asistente para cuando recibas respuesta"
            ]),
            ("CUANDO RECIBAS RESPUESTA (1-3 d√≠as)", [
                "üìß 4. Seguir instrucciones del email de Redsys",
                "üîß 5. Registrar tu aplicaci√≥n en el portal",
                "üîë 6. Obtener CLIENT_ID y CLIENT_SECRET",
                "‚öôÔ∏è 7. Completar config_psd2.py con las credenciales"
            ]),
            ("PRUEBAS Y PRODUCCI√ìN", [
                "üß™ 8. Ejecutar pruebas en sandbox",
                "‚úÖ 9. Solicitar upgrade a producci√≥n",
                "üöÄ 10. ¬°Usar la API oficialmente!"
            ])
        ]
        
        for phase, phase_steps in steps:
            print(f"\nüïê {phase}:")
            for step in phase_steps:
                print(f"   {step}")
        
        print(f"\nüì± CONTACTO DE SOPORTE:")
        print(f"   Email: psd2.sandbox.soporte@redsys.es")
        print(f"   Asunto: TPP support tool registration")
        
        print(f"\n‚è∞ TIEMPO ESTIMADO TOTAL: 5-7 d√≠as")
    
    def create_checklist(self):
        """Crear checklist de seguimiento"""
        checklist_content = f"""
# ‚úÖ CHECKLIST REGISTRO PSD2 BANKINTER
# Creado: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

## üìã FASE 1: SOLICITUD INICIAL
- [ ] Crear cuenta en https://market.apis-i.redsys.es/psd2/xs2a
- [ ] Enviar email a: psd2.sandbox.soporte@redsys.es
- [ ] Asunto: "TPP support tool registration"
- [ ] Incluir datos generados por el asistente

## üìã FASE 2: CONFIGURACI√ìN (Tras recibir respuesta)
- [ ] Login en el portal Redsys
- [ ] Registrar aplicaci√≥n: "Inmuebles Management App"
- [ ] Obtener CLIENT_ID
- [ ] Obtener CLIENT_SECRET
- [ ] Completar archivo config_psd2.py

## üìã FASE 3: PRUEBAS SANDBOX
- [ ] Ejecutar: python bankinter_api_client.py
- [ ] Probar autenticaci√≥n OAuth2
- [ ] Probar creaci√≥n de consentimiento
- [ ] Probar obtenci√≥n de cuentas
- [ ] Probar descarga de transacciones

## üìã FASE 4: PRODUCCI√ìN
- [ ] Solicitar upgrade a producci√≥n
- [ ] Configurar certificado SSL propio
- [ ] Pruebas finales con datos reales
- [ ] Integraci√≥n con sistema inmobiliario

## üìû CONTACTOS IMPORTANTES
- Soporte: psd2.sandbox.soporte@redsys.es
- Portal: https://market.apis-i.redsys.es/psd2/xs2a
- Documentaci√≥n: https://market.apis-i.redsys.es/psd2/xs2a/guia

## üìä PROGRESO
Fecha de inicio: {datetime.datetime.now().strftime('%Y-%m-%d')}
Estado actual: Solicitud inicial
Pr√≥ximo paso: Enviar email de solicitud

---
Actualiza este archivo seg√∫n vayas completando los pasos.
"""
        
        filename = "checklist_psd2.md"
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(checklist_content)
        
        print(f"\nüìã CHECKLIST CREADO: {filename}")
        print("√ösalo para hacer seguimiento del progreso")
        
        return filename
    
    def run(self):
        """Ejecutar asistente completo"""
        self.welcome()
        
        # Recopilar informaci√≥n
        self.collect_user_info()
        
        # Generar documentos
        email_file = self.generate_registration_email()
        config_file = self.create_config_template()
        checklist_file = self.create_checklist()
        
        # Abrir enlaces
        self.open_registration_links()
        
        # Mostrar pr√≥ximos pasos
        self.show_next_steps()
        
        print("\n" + "="*60)
        print("üéâ ASISTENTE COMPLETADO")
        print("="*60)
        print(f"üìß Email generado: {email_file}")
        print(f"‚öôÔ∏è Config template: {config_file}")
        print(f"üìã Checklist: {checklist_file}")
        print()
        print("‚è∞ Pr√≥ximo paso: Env√≠a el email y espera respuesta (1-3 d√≠as)")
        print("üîÑ Vuelve a ejecutar este script cuando recibas las credenciales")


def main():
    """Funci√≥n principal"""
    try:
        assistant = RegistroPSD2Assistant()
        assistant.run()
        
        print("\n¬øQuieres abrir el email generado para copiarlo? (s/n): ", end="")
        try:
            response = input().strip().lower()
            if response in ['s', 'si', 'yes', 'y']:
                # Buscar el archivo de email m√°s reciente
                email_files = [f for f in os.listdir('.') if f.startswith('email_solicitud_psd2_')]
                if email_files:
                    latest_email = sorted(email_files)[-1]
                    os.startfile(latest_email)  # Windows
                    print(f"‚úÖ Abriendo {latest_email}")
        except:
            pass
        
    except KeyboardInterrupt:
        print("\n\nüëã Proceso cancelado por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error: {e}")
        print("Contacta con soporte si el problema persiste")


if __name__ == "__main__":
    main()
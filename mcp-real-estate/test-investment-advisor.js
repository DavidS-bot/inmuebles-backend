// test-investment-advisor.js
const InvestmentAdvisor = require('./investment-advisor');

console.log('üß™ PRUEBA DEL AGENTE DE AN√ÅLISIS DE INVERSI√ìN\n');

const advisor = new InvestmentAdvisor();

// Datos de ejemplo del prompt original
const propertyData = {
  price: 350000,
  size: 80,
  location: 'madrid',
  neighborhood: 'centro'
};

const bankData = {
  monthlyIncome: 4500,
  monthlyExpenses: 2800,
  savings: 85000,
  currentDebt: 0
};

console.log('üè† PROPIEDAD ANALIZADA:');
console.log(`‚Ä¢ Precio: ${propertyData.price.toLocaleString()}‚Ç¨`);
console.log(`‚Ä¢ Tama√±o: ${propertyData.size}m¬≤`);
console.log(`‚Ä¢ Ubicaci√≥n: ${propertyData.neighborhood}, Madrid`);

console.log('\nüë§ PERFIL FINANCIERO:');
console.log(`‚Ä¢ Ingresos mensuales: ${bankData.monthlyIncome.toLocaleString()}‚Ç¨`);
console.log(`‚Ä¢ Gastos mensuales: ${bankData.monthlyExpenses.toLocaleString()}‚Ç¨`);
console.log(`‚Ä¢ Ingresos netos: ${(bankData.monthlyIncome - bankData.monthlyExpenses).toLocaleString()}‚Ç¨`);
console.log(`‚Ä¢ Ahorros: ${bankData.savings.toLocaleString()}‚Ç¨`);

console.log('\nüìä EJECUTANDO AN√ÅLISIS COMPLETO...\n');

const report = advisor.generateInvestmentReport(bankData, propertyData, 'madrid', 'centro');

console.log('üí≥ CAPACIDAD DE PAGO:');
console.log(`‚Ä¢ Entrada requerida (20%): ${report.affordability.downPayment.toLocaleString()}‚Ç¨`);
console.log(`‚Ä¢ Cuota mensual hipoteca: ${report.affordability.monthlyPayment.toLocaleString()}‚Ç¨`);
console.log(`‚Ä¢ Ratio vivienda/ingresos: ${report.affordability.housingRatio}%`);
console.log(`‚Ä¢ Ratio deuda total: ${report.affordability.debtToIncomeAfter}%`);
console.log(`‚Ä¢ ${report.affordability.recommendation}`);

console.log('\nüìà RENTABILIDAD ESPERADA:');
console.log(`‚Ä¢ Renta mensual estimada: ${report.profitability.estimatedRent.toLocaleString()}‚Ç¨`);
console.log(`‚Ä¢ Rentabilidad neta: ${report.profitability.netYield.toFixed(2)}%`);
console.log(`‚Ä¢ ${report.profitability.marketAnalysis}`);

console.log('\nüîÑ COMPARACI√ìN CON ALTERNATIVAS:');
report.alternatives.alternatives.forEach(alt => {
  console.log(`‚Ä¢ ${alt.name.toUpperCase()}: ${alt.avgReturn}% anual - ${alt.verdict}`);
});

console.log('\nüìä PROYECCI√ìN A 10 A√ëOS:');
console.log(`‚Ä¢ Valor final propiedad: ${report.projection.year10.propertyValue.toLocaleString()}‚Ç¨`);
console.log(`‚Ä¢ Rentas acumuladas: ${report.projection.year10.cumulativeRent.toLocaleString()}‚Ç¨`);
console.log(`‚Ä¢ ROI total: ${report.projection.year10.roi}%`);
console.log(`‚Ä¢ Rentabilidad anualizada: ${report.projection.year10.annualizedReturn}%`);

console.log('\nüéØ RECOMENDACI√ìN FINAL:');
if (report.affordability.viability === 'no-viable') {
  console.log('‚ùå INVERSI√ìN NO RECOMENDABLE: No cumples con los criterios financieros m√≠nimos.');
} else if (report.profitability.netYield < 2.5 && report.projection.year10.annualizedReturn < 5) {
  console.log('‚ö†Ô∏è INVERSI√ìN POCO ATRACTIVA: La rentabilidad est√° por debajo del mercado.');
} else if (report.affordability.viability === 'arriesgada' && report.profitability.netYield < 4) {
  console.log('‚ö†Ô∏è INVERSI√ìN DE ALTO RIESGO: Est√°s en el l√≠mite de capacidad financiera.');
} else if (report.profitability.netYield >= 4 && report.affordability.viability === 'viable') {
  console.log('‚úÖ EXCELENTE OPORTUNIDAD: Cumples criterios financieros y rentabilidad atractiva.');
} else {
  console.log('‚ö° INVERSI√ìN ACEPTABLE: Es viable pero eval√∫a si se alinea con tus objetivos.');
}

console.log('\n‚úÖ An√°lisis completado exitosamente!');
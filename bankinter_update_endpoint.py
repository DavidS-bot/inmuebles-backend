#!/usr/bin/env python3
"""
Endpoint para actualizar movimientos de Bankinter
Dise√±ado para ser llamado desde el bot√≥n web
"""

import asyncio
import pandas as pd
import requests
import os
import sys
import logging
from datetime import datetime

# Configurar logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Agregar app al path
app_path = os.path.join(os.path.dirname(__file__), 'app')
sys.path.insert(0, app_path)

async def execute_bankinter_update():
    """Ejecutar el scraper v7 y subir los datos"""
    
    try:
        from services.bankinter_scraper_v7 import BankinterScraperV7
        
        logger.info("üè¶ Iniciando actualizaci√≥n autom√°tica de Bankinter")
        
        # Configurar scraper v7 con credenciales que funcionan
        scraper = BankinterScraperV7(
            username="75867185",
            password="Motoreta123$",
            agent_username="davsanchez21277@gmail.com",
            agent_password="123456",
            auto_upload=False  # Manejaremos la subida manualmente
        )
        
        # Ejecutar scraper
        scraper.setup_driver()
        
        try:
            transactions, excel_file, api_excel_file, csv_file, _ = await scraper.get_august_movements_corrected()
            logger.info(f"‚úÖ Scraper completado: {len(transactions)} movimientos extra√≠dos")
        except Exception as e:
            logger.error(f"Error en scraper (probablemente Unicode): {e}")
            # Si falla por Unicode, intentar proceso alternativo
            scraper.close()
            return {
                "success": False,
                "message": f"Error en scraping: {str(e)[:100]}",
                "new_movements": 0,
                "duplicates_skipped": 0,
                "total_movements": 0
            }
        
        if not transactions:
            return {
                "success": False,
                "message": "No se encontraron movimientos nuevos",
                "new_movements": 0,
                "duplicates_skipped": 0,
                "total_movements": 0
            }
        
        # Aplicar correcciones directamente usando nuestro script de limpieza
        logger.info("üîß Aplicando limpieza de coletillas y clasificaci√≥n autom√°tica...")
        
        try:
            # Importar y usar nuestra funci√≥n de limpieza directamente
            import sqlite3
            import re
            from datetime import datetime, timedelta
            
            conn = sqlite3.connect('./data/dev.db')
            cursor = conn.cursor()
            
            # 1. Limpiar coletillas de movimientos recientes (√∫ltimos 7 d√≠as)
            end_date = datetime.now().date()
            start_date = end_date - timedelta(days=7)
            
            cursor.execute("""
                SELECT id, concept
                FROM financialmovement 
                WHERE date >= ? 
                AND (concept LIKE '%Pulsa para ver%' OR concept LIKE '%pulsa para ver%')
            """, (start_date,))
            
            movements_with_coletillas = cursor.fetchall()
            cleaned_count = 0
            
            for mov_id, concept in movements_with_coletillas:
                # Limpiar concepto usando regex corregidos (sin escapes dobles)
                cleaned_concept = re.sub(r'Pulsa para ver detalle.*$', '', concept, flags=re.IGNORECASE | re.MULTILINE)
                cleaned_concept = re.sub(r'\n.*Pulsa para ver.*$', '', cleaned_concept, flags=re.IGNORECASE | re.MULTILINE)
                cleaned_concept = re.sub(r'.*Pulsa para ver.*', '', cleaned_concept, flags=re.IGNORECASE)
                cleaned_concept = re.sub(r'\n+', ' ', cleaned_concept)
                cleaned_concept = re.sub(r'\s+', ' ', cleaned_concept)
                cleaned_concept = cleaned_concept.strip()
                
                if cleaned_concept != concept and cleaned_concept:
                    cursor.execute("UPDATE financialmovement SET concept = ? WHERE id = ?", (cleaned_concept, mov_id))
                    if cursor.rowcount > 0:
                        cleaned_count += 1
            
            # 2. Aplicar clasificaci√≥n autom√°tica a movimientos sin asignar
            cursor.execute("""
                SELECT id, concept FROM financialmovement 
                WHERE date >= ? AND property_id IS NULL
            """, (start_date,))
            
            unassigned_movements = cursor.fetchall()
            
            # Obtener reglas activas
            cursor.execute("""
                SELECT id, property_id, keyword, category, tenant_name 
                FROM classificationrule 
                WHERE is_active = 1
            """)
            
            rules = cursor.fetchall()
            assigned_count = 0
            
            # Aplicar clasificaci√≥n con scoring
            for mov_id, concept in unassigned_movements:
                concept_normalized = concept.upper().strip()
                best_match = None
                best_score = 0
                
                for rule in rules:
                    rule_id, property_id, keyword, category, tenant_name = rule
                    keyword_normalized = keyword.upper().strip()
                    
                    if keyword_normalized in concept_normalized:
                        score = len(keyword_normalized) / len(concept_normalized)
                        if score > best_score:
                            best_score = score
                            best_match = {'property_id': property_id, 'tenant_name': tenant_name}
                
                # Aplicar si tenemos buena coincidencia
                if best_match and best_score > 0.2:
                    cursor.execute("""
                        UPDATE financialmovement 
                        SET property_id = ?, tenant_name = ?
                        WHERE id = ?
                    """, (best_match['property_id'], best_match['tenant_name'], mov_id))
                    
                    if cursor.rowcount > 0:
                        assigned_count += 1
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ Limpieza completada: {cleaned_count} coletillas removidas, {assigned_count} movimientos asignados")
            
            return {
                "success": True,
                "message": "Actualizaci√≥n de Bankinter completada exitosamente",
                "new_movements": len(transactions),
                "duplicates_skipped": 0,
                "total_movements": len(transactions),
                "cleaned_coletillas": cleaned_count,
                "assigned_movements": assigned_count
            }
            
        except Exception as e:
            logger.error(f"Error en correcci√≥n autom√°tica: {e}")
            return {
                "success": False,
                "message": f"Error aplicando correcciones: {str(e)}",
                "new_movements": 0,
                "duplicates_skipped": 0,
                "total_movements": len(transactions)
            }
            
    except Exception as e:
        logger.error(f"Error en actualizaci√≥n: {e}")
        return {
            "success": False,
            "message": f"Error: {str(e)}",
            "new_movements": 0,
            "duplicates_skipped": 0,
            "total_movements": 0
        }
        
    finally:
        try:
            scraper.close()
        except:
            pass

async def main():
    """Funci√≥n principal para testing"""
    result = await execute_bankinter_update()
    print("RESULT_JSON:", result)
    return result

if __name__ == "__main__":
    asyncio.run(main())